name: NPM Publish

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets._GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Get PR changes
        id: pr_changes
        run: |
          CHANGES=$(git log -1 --pretty=%B)
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version
        uses: actions/github-script@v7
        with:
          script: |
            const { Configuration, OpenAIApi } = require('openai');

            const openai = new OpenAIApi(new Configuration({
              apiKey: process.env.OPENAI_API_KEY,
            }));

            const changes = process.env.PR_CHANGES;

            const prompt = `Based on these changes, determine if this should be a "major", "minor", or "patch" version bump. Only respond with one of those three words.

            Changes:
            ${changes}

            Consider:
            - "major" for breaking changes
            - "minor" for new features
            - "patch" for bug fixes and minor changes
            `;

            const response = await openai.createChatCompletion({
              model: 'gpt-3.5-turbo',
              messages: [{ role: 'user', content: prompt }],
            });

            const bumpType = response.data.choices[0].message.content.toLowerCase().trim();
            core.setOutput('bump_type', bumpType);
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PR_CHANGES: ${{ steps.pr_changes.outputs.changes }}

      - name: Update version
        id: update_version
        run: |
          BUMP_TYPE="${{ steps.version.outputs.bump_type }}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Split version into components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          case $BUMP_TYPE in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac

          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version

          # Set output for next steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Commit and push version update
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.update_version.outputs.new_version }} [skip ci]"
          git push

      - name: Build and publish
        run: npm run pack
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
